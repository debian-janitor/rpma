#
# Builds run over the night testing all OSes supported by librpma.
# (each of them is built with two compilers, gcc and clang, separately).
#
# It is run at 00:00 UTC every day or on demand.
#

name: Nightly

on:
  workflow_dispatch:
  schedule:
    - cron:  '0 0 * * *'

env:
    GITHUB_REPO: pmem/rpma
    # use GitHub Container Registry as a repository of docker images
    GH_CR_ADDR:  ghcr.io
    DOCKER_REPO: ghcr.io/pmem/rpma
    # use org's Private Access Token to log in to GitHub Container Registry
    GH_CR_USER:  ${{ secrets.GH_CR_USER }}
    GH_CR_PAT:   ${{ secrets.GH_CR_PAT }}
    DOC_UPDATE_GITHUB_TOKEN: ${{ secrets.DOC_UPDATE_GITHUB_TOKEN }}
    HOST_WORKDIR: /home/runner/work/rpma/rpma
    WORKDIR:      utils/docker
    TYPE:         normal

jobs:
  gcc:
    name: GCC
    runs-on: ubuntu-latest
    env:
       CC:         gcc
       PUSH_IMAGE: 1
    strategy:
      fail-fast: false
      matrix:
        CONFIG: ["N=Ubuntu       OS=ubuntu  OS_VER=latest",
                 "N=Fedora       OS=fedora  OS_VER=latest",
                 "N=Debian       OS=debian  OS_VER=latest",
                 "N=DebianS      OS=debian  OS_VER=stable",
                 "N=CentOS7      OS=centos  OS_VER=7",
                 # successors of CentOS:
                 "N=RockyLinux9  OS=rockylinux OS_VER=9",
                 "N=RockyLinux8  OS=rockylinux OS_VER=8",
                 "N=VzLinux8     OS=vzlinux    OS_VER=latest",
                 # Rolling/testing/experimental distributions
                 # (Fedora Rawhide, Ubuntu Rolling and Arch Linux
                 #  were moved to Nightly_Experimental):
                 "N=Debian_Testing       OS=debian               OS_VER=testing",
                 "N=Debian_Experimental  OS=debian               OS_VER=experimental",
                 "N=OpenSUSE_Leap        OS=opensuse-leap        OS_VER=latest",
                 "N=OpenSUSE_Tumbleweed  OS=opensuse-tumbleweed  OS_VER=latest"]
    steps:
       - name: Clone the git repo
         uses: actions/checkout@v1

       - name: Pull or rebuild the image
         run: cd $WORKDIR && ${{ matrix.CONFIG }} ./pull-or-rebuild-image.sh

       - name: Run the build
         run: cd $WORKDIR && ${{ matrix.CONFIG }} ./build.sh

       - name: Push the image
         run: cd $WORKDIR && source ./set-vars.sh && ${{ matrix.CONFIG }} /bin/bash -c "if [[ -f ${CI_FILE_PUSH_IMAGE_TO_REPO} ]]; then images/push-image.sh; fi"

  clang:
    name: Clang
    runs-on: ubuntu-latest
    env:
       CC: clang
    strategy:
      fail-fast: false
      matrix:
        CONFIG: ["N=Ubuntu       OS=ubuntu  OS_VER=latest",
                 "N=Fedora       OS=fedora  OS_VER=latest",
                 "N=Debian       OS=debian  OS_VER=latest",
                 "N=DebianS      OS=debian  OS_VER=stable",
                 "N=CentOS7      OS=centos  OS_VER=7",
                 # successors of CentOS:
                 "N=RockyLinux9  OS=rockylinux OS_VER=9",
                 "N=RockyLinux8  OS=rockylinux OS_VER=8",
                 "N=VzLinux8     OS=vzlinux    OS_VER=latest",
                 # Rolling/testing/experimental distributions
                 # (Fedora Rawhide, Ubuntu Rolling and Arch Linux
                 #  were moved to Nightly_Experimental):
                 "N=Debian_Testing       OS=debian               OS_VER=testing",
                 "N=Debian_Experimental  OS=debian               OS_VER=experimental",
                 "N=OpenSUSE_Leap        OS=opensuse-leap        OS_VER=latest",
                 "N=OpenSUSE_Tumbleweed  OS=opensuse-tumbleweed  OS_VER=latest"]
    steps:
       - name: Clone the git repo
         uses: actions/checkout@v1

       - name: Pull or rebuild the image
         run: cd $WORKDIR && ${{ matrix.CONFIG }} ./pull-or-rebuild-image.sh

       - name: Run the build
         run: cd $WORKDIR && ${{ matrix.CONFIG }} ./build.sh

       - name: Push the image
         run: cd $WORKDIR && source ./set-vars.sh && ${{ matrix.CONFIG }} /bin/bash -c "if [[ -f ${CI_FILE_PUSH_IMAGE_TO_REPO} ]]; then images/push-image.sh; fi"
